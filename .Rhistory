for(j in 1:3) {
print(my.courses[[i]][[j]])
}
}
ss_median <- function (x, y)  {
our.result <- median(x)
return(our.result)
our.result - y
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
ss_median <- function (x, y)  {
our.result <- median(x)
our.result - y
return(our.result)
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
ss_median <- function (x, y)  {
our.result <- median(x) - y
return(our.result)
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
our.result <- (median(x) - y)^2
our.result <- median(x) - y
our.result <- median(x)
ss_median <- function (x, y)  {
our.result <- median(x) - y
return(our.result)
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
#Now let's try squaring it
ss_median <- function (x, y)  {
our.result <- median(x) - y
our.result <- (our.result)*(our.result)
return(our.result)
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
#Now let's try squaring it
ss_median <- function (x, y)  {
our.result <- median(x) - y
our.result <- (our.result)^2
return(our.result)
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
my.vector <- c(3,5,7)
my.vector
median(my.vector)
ss_median <- function (x, y)  {
our.result <- median(x) - y
return(our.result)
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
#Now let's try squaring it
ss_median <- function (x, y)  {
our.result <- median(x) - y
our.result <- (our.result)*(our.result)
return(our.result)
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
practice <- c(3,5)
my.vector <- c(3,5,7)
my.vector
median(my.vector)
practice <- c(3,5)
#Now let's try squaring it
ss_median <- function (x, y)  {
our.result <- median(x) - y
our.result <- (our.result)^2
return(our.result)
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
ss_median(my.vector, practice)
#Now let's try squaring it
ss_median <- function (x, y)  {
our.result <- (median(x) - y)^2
return(our.result)
}
ss_median(my.vector, 5)
ss_median(my.vector, 3)
ss_median(my.vector, practice)
sum(ss_median)
my_data <- data.frame("A" = c(1,2,3,4,5),
"B" = c(1,3,5,7,9),
"C" = c(10,20,30,40,50),
"D" = c(10,30,50,70,90))
my_data
for (i in 1:4){
print(my_data[[i]][[1]])
}
#The function it's self
ss_median <- function (x, y)  {
our.result <- (median(x) - y)^2
return(our.result)
}
sum(our.result)
ss_median(my_data[[i]][[1]])
for (i in 1:4){
ss_median(my_data[[i]], 3)
}
ss_median
ss_median(my.vector, 5)
ss_median(my.vector, 3)
ss_median(my.vector, practice)
for (i in 1:4) {
for(j in 1:5) {
ss_median(my_data[[i]][[j]])
}
}
ss_median(my_data[[i]], my_data[[j]])
my_data <- data.frame("A" = c(1,2,3,4,5),
"B" = c(1,3,5,7,9),
"C" = c(10,20,30,40,50),
"D" = c(10,30,50,70,90))
my_data
my_data <- data.frame("A" = c(1,2,3,4,5),
"B" = c(1,3,5,7,9),
"C" = c(10,20,30,40,50),
"D" = c(10,30,50,70,90))
# Step 1 - we need the median of each column
apply(my_data, 2, median)
my_data
# Step 1 - we need the median of each column
MED <- apply(my_data, 2, median)
MED
#Step 2 - difference for each number in the column from the median
DIF <- apply(my_data, 2, x-MED)
# Q4 - Create a vector called fives for 5 - 100 -------------------------
fives <- seq(5, 100, by = 5)
fives
# Q5 - Subset out the 3rd and 5th elements --------------------------------
fives[c(3,5)]
# Q6 - Use the modulus operator to subset out all elements of -------------
ten <- fives %% 10
ten
# Correct answer from review
ten <- [!fives %% 10]
ten
# Correct answer from review
fives[!fives %% 10]
# Q9 - Subset elements less than 10 ---------------------------------------
less_10 <- evens_odds[1:5,]
# Q7 -  Create a matrix called --------------------------------------------
evens_odds <- matrix (c(1,3,5,7,9,11,13,15,17,19,2,4,6,8,10,12,14,16,18,20),
ncol = 2)
evens_odds
# Q8 - name the two columns evens and odds --------------------------------
colnames(evens_odds) <- c("Odds", "Evens")
evens_odds
# Q9 - Subset elements less than 10 ---------------------------------------
less_10 <- evens_odds[1:5,]
less_10
# Correction
matrix(evens_odds[evens_odds <=10], ncol = 2)
# Q15 - Read in the baby boom data ----------------------------------------
baby_boom <- read.csv("Baby Boom Data.csv")
baby_boom
# Q16 - Identify class & attributes of baby boom --------------------------
class(baby_boom)
attributes(baby_boom)
#Correction -
baby_boom$Gender <- factor(baby_boom$gender,
levels = c(1,2),
labels = c("female", "male"))
#Better way
sum(baby_boom#weight > 3500)
#Better way
sum(baby_boom$weight > 3500)
#Correction
ss_median <- function(x){
med_diff <- x - median(x)
ss <- sum(med_diff^2)
return(ss)
}
for(i in 1:length(names(my_data))) {
print(ss_median(my_data[,i]))
}
# Step 1 - we need the median of each column
MED <- apply(my_data, 2, ss_median)
MED
install.packages("here")
mod <- function(x,y,p){
model <- lm(x~y)
summary(model)
attributes(model)
Residuals <- ((resid(model)^2)^(1/2))
Sort_Residuals <- sort(Residuals,decreasing = TRUE)
cutoff <- Sort_Residuals[p]
logical_residual <- (Residuals >= cutoff)
return(logical_residual)
}
mod <- function(x,y,p){
model <- lm(x~y)
summary(model)
attributes(model)
Residuals <- ((resid(model)^2)^(1/2))
Sort_Residuals <- sort(Residuals,decreasing = TRUE)
cutoff <- Sort_Residuals[p]
logical_residual <- (Residuals >= cutoff)
return(logical_residual)
}
BBD <- read.csv("Baby Boom Data.csv")
attributes(BBD)
regression_residual <- mod(BBD$weight,BBD$minute, 10)
graph <- function(x,y){
scatter <- plot(x,y)
}
graph <- function(x,y){
scatter <- plot(x,y,
col= ifelse(regression_residual = TRUE, "blue", "black"))
abline(mod)
}
graph <- function(x,y){
scatter <- plot(x,y,
col= ifelse(regression_residual = TRUE, "blue", "black"))
abline(mod)
}
graph <- function(x,y){
scatter <- plot(x,y,
col= ifelse(regression_residual = TRUE, "blue", "black"))
abline(mod)
}
mod <- function(x,y,p){
model <- lm(x~y)
summary(model)
attributes(model)
Residuals <- ((resid(model)^2)^(1/2))
Sort_Residuals <- sort(Residuals,decreasing = TRUE)
cutoff <- Sort_Residuals[p]
logical_residual <- (Residuals >= cutoff)
return(logical_residual)
}
BBD <- read.csv("Baby Boom Data.csv")
attributes(BBD)
regression_residual <- mod(BBD$weight,BBD$minute, 10)
{
scatter <- plot(BBD$weight,BBD$minute,
col= ifelse(regression_residual = TRUE, "blue", "black"))
abline(mod)
}
{
scatter <- plot(BBD$weight,BBD$minute)
abline(mod)
}
{
scatter <- plot(BBD$weight,BBD$minute)
}
{
scatter <- plot(BBD$weight,BBD$minute)
abline(mod(BBD$minute,BBD$weight,10))
}
{
scatter <- plot(BBD$weight,BBD$minute)
model <- (mod(BBD$minute,BBD$weight,10))
abline(model)
}
{
scatter <- plot(BBD$weight,BBD$minute)
model <- lm(BBD$minute ~ BBD$weight)
abline(model)
}
mod <- function(x,y,p){
model <- lm(x~y)
summary(model)
attributes(model)
Residuals <- ((resid(model)^2)^(1/2))
Sort_Residuals <- sort(Residuals,decreasing = TRUE)
cutoff <- Sort_Residuals[p]
logical_residual <- (Residuals >= cutoff)
return(logical_residual)
}
Residuals <- resid(model)
BBD <- read.csv("Baby Boom Data.csv")
attributes(BBD)
regression_residual <- mod(BBD$weight,BBD$minute, 10)
{
scatter <- plot(BBD$weight,BBD$minute)
model <- lm(BBD$minute ~ BBD$weight)
abline(model)
}
library(scales)
install.packages("tidyverse")
install.packages("scales")
install.packages("ggrepel")
library(tidyverse)
hsb2 <- read_csv("hsb2.csv")
View(hsb2)
hsb2
hsb2 <- read.csv(here("Data", "hsb2.csv"))
hsb2 <- as_tibble(hsb2)
hsb2
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math))
+ geom_point(mapping = aes(x = read, y = math, color = ses))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math))
hsb2$ses <- factor(hsb2$ses,
labels = c("low", "middle", "high"),
ordered = TRUE)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math, color = ses))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math)) +
facet_wrap(~ ses)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math)) +
facet_wrap(~ ses, nrow = 3)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math)) +
facet_wrap(~ ses, nrow = 2)
hsb2$schtyp <- factor(hsb2$schtyp,
labels = c("public", "private"))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math)) +
facet_grid(ses ~ schtyp)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math)) +
facet_grid(. ~ schtyp)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math))
ggplot(data = hsb2) +
geom_smooth(mapping = aes(x = read, y = math))
ggplot(data = hsb2) +
geom_smooth(mapping = aes(x = read, y = math, linetype = schtyp))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math, color = schtyp)) +
geom_smooth(mapping = aes(x = read, y = math, color = schtyp))
ggplot(data = hsb2, mapping = aes(x = read, y = math, color = schtyp)) +
geom_point() +
geom_smooth()
ggplot(data = hsb2, mapping = aes(x = read, y = math)) +
geom_point() +
geom_smooth()
ggplot(data = hsb2, mapping = aes(x = read, y = math)) +
geom_point(mapping = aes(color = schtyp)) +
geom_smooth()
ggplot(data = hsb2) +
geom_bar(mapping = aes(x = ses))
ggplot(data = hsb2) +
geom_bar(mapping = aes(x = schtyp, fill = ses))
ggplot(data = hsb2) +
geom_bar(mapping = aes(x = schtyp, fill = ses)) +
labs(x = "School Type", y = "Count")
setwd("C:/Users/rebec/Desktop/Git Repos/Assignment 8")
library(ggplot2)
hsb2 <- read_csv("hsb2.csv")
library(ggplot2)
hsb2 <- read_csv("hsb2.csv")
library(ggplot2)
hsb2 <- read_csv("hsb2.csv")
library(tidyverse)
hsb2 <- read_csv("hsb2.csv")
library(tidyverse)
hsb2 <- read_csv("hsb2.csv")
View(hsb2)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math))
ggplot(data = hsb2)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science, color = gender))
hsb2 <- read_csv("hsb2.csv")
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science, color = female))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math)) +
facet_wrap(~ ses)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math)) +
facet_wrap(~ ses, nrow = 3)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science)) +
facet_wrap(~ female)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science)) +
facet_wrap(~ female)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science)) +
facet_wrap(~ female)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math)) +
facet_wrap(~ ses, nrow = 3)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math)) +
facet_grid(. ~ schtyp)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math))
ggplot(data = hsb2) +
geom_smooth(mapping = aes(x = read, y = math))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math, color = schtyp)) +
geom_smooth(mapping = aes(x = read, y = math, color = schtyp))
ggplot(data = hsb2, mapping = aes(x = read, y = math, color = schtyp)) +
geom_point() +
geom_smooth()
ggplot(data = hsb2, mapping = aes(x = math, y = science)) +
geom_point(mapping = aes(color = schtyp)) +
geom_smooth()
library(tidyverse)
Likert_Total <- function(x,y,z){
Reversed <- abs(x[,c(z)]-y)
Non_Reversed_Columns <- x[,-z]
Properly_Scored_Data_Frame <- cbind(Non_Reversed_Columns,Reversed)
CC <- rowSums(Properly_Scored_Data_Frame)
Total_Data_Frame <- cbind(Properly_Scored_Data_Frame,CC)
print(Total_Data_Frame)
return(Total_Data_Frame)
}
HD_ugly <- read_csv("Howard's Data.csv")
HD <- HD_ugly[-1]
HD
CTR <- c(3,5,7)
Howard_Data <- Likert_Total(HD, 8, CTR)
Howard_Data
library(ggplot2)
hsb2 <- read_csv("hsb2.csv")
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science, color = female))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science)) +
facet_wrap(~ female)
library(tidyverse)
Likert_Total <- function(x,y,z){
Reversed <- abs(x[,c(z)]-y)
Non_Reversed_Columns <- x[,-z]
Properly_Scored_Data_Frame <- cbind(Non_Reversed_Columns,Reversed)
CC <- rowSums(Properly_Scored_Data_Frame)
Total_Data_Frame <- cbind(Properly_Scored_Data_Frame,CC)
print(Total_Data_Frame)
return(Total_Data_Frame)
}
HD_ugly <- read_csv("Howard's Data.csv")
HD <- HD_ugly[-1]
HD
CTR <- c(3,5,7)
Howard_Data <- Likert_Total(HD, 8, CTR)
Howard_Data
library(ggplot2)
hsb2 <- read_csv("hsb2.csv")
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science, color = female))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science)) +
facet_wrap(~ female)
ggplot(data = hsb2, mapping = aes(x = math, y = science)) +
geom_point(mapping = aes(color = schtyp)) +
geom_smooth()
ggplot(data = hsb2, mapping = aes(x = math, y = science)) +
geom_point(mapping = aes(color = schtyp)) +
geom_text()
ggplot(data = hsb2, mapping = aes(x = math, y = science)) +
geom_point(mapping = aes(color = schtyp)) +
geom_text(mapping = aes(label = cty))
ggplot(data = hsb2, mapping = aes(x = math, y = science)) +
geom_point(mapping = aes) +
geom_text(mapping = aes(label = cty))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math, color = schtyp)) +
geom_smooth(mapping = aes(x = read, y = math, color = schtyp))
# We can set aesthetic mappings for an entire ggplot by putting them
# in the ggplot function instead of the geom. Notice that the aesthetic
# mappings are the same in both geoms above. We could have done this.
# Now each geom will take theggplot(data = hsb2, mapping = aes(x = read, y = math)) +
geom_point(mapping = aes(color = schtyp)) +
geom_smooth() mappings from ggplot.
ggplot(data = hsb2, mapping = aes(x = read, y = math, color = schtyp)) +
geom_point() +
geom_smooth()
ggplot(data = hsb2, mapping = aes(x = read, y = math)) +
geom_point() +
geom_smooth()
ggplot(data = hsb2) +
geom_bar(mapping = aes(x = ses))
ggplot(data = hsb2) +
geom_bar(mapping = aes(x = schtyp, fill = ses))
ggplot(data = hsb2) +
geom_bar(mapping = aes(x = schtyp, fill = ses)) +
labs(x = "School Type", y = "Count")
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science)) +
geom_quantile(female)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science)) +
geom_quantile(ses)
ggplot(data = hsb2) +
geom_point(mapping = aes(x = math, y = science))
ggplot(data = hsb2) +
geom_point(mapping = aes(x = read, y = math, color = schtyp)) +
geom_smooth(mapping = aes(x = read, y = math, color = schtyp))
ggplot(data = hsb2, mapping = aes(x = math, y = science, color = schtyp)) +
geom_point() +
geom_smooth()
ggplot(data = hsb2, mapping = aes(x = math, y = science, color = schtyp)) +
geom_point() +
geom_smooth()
ggplot(data = hsb2, mapping = aes(x = math, y = science, color = ses)) +
geom_point() +
geom_smooth()
ggplot(data = hsb2, mapping = aes(x = math, y = science, color = ses)) +
geom_point() +
geom_text()
ggplot(data = hsb2, mapping = aes(x = math, y = science, color = ses)) +
geom_point() +
geom_quantile()
